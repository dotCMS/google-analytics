plugins {
    id 'biz.aQute.bnd.builder' version '3.3.0'
}

apply plugin: 'application'
apply plugin: 'war'
apply plugin: 'idea'


sourceCompatibility = '1.8'
version = '0.1'


repositories {
    maven { url "https://repo.dotcms.com/artifactory/libs-release" }
}

configurations {
    osgiLibs
}

dependencies {
    compile('com.dotcms:dotcms:23.01.10') { transitive = true }
    // https://mvnrepository.com/artifact/com.google.apis/google-api-services-analytics
    compile group: 'com.google.apis', name: 'google-api-services-analytics', version: 'v3-rev169-1.25.0'
    osgiLibs group: 'com.google.apis', name: 'google-api-services-analytics', version: 'v3-rev169-1.25.0'
    // gson
    // https://mvnrepository.com/artifact/com.google.api-client/google-api-client-gson
    // https://mvnrepository.com/artifact/com.google.api-client/google-api-client
    //compile group: 'com.google.api-client', name: 'google-api-client', version: '1.25.0'
    //osgiLibs group: 'com.google.api-client', name: 'google-api-client', version: '1.25.0'

    compileOnly('org.apache.logging.log4j:log4j-api:2.17.2')
    compileOnly('org.apache.logging.log4j:log4j-core:2.20.0')
    compileOnly('org.apache.felix:org.apache.felix.framework:7.0.5')
    compileOnly('org.apache.httpcomponents:httpclient:4.5.9')
    // https://mvnrepository.com/artifact/javax.servlet/servlet-api
    compileOnly group: 'javax.servlet', name: 'servlet-api', version: '2.5'

}


/////////////////////////
//Plugin jar
/////////////////////////

import java.util.jar.Attributes
import java.util.jar.JarFile
jar.baseName = 'com.dotcms.google.analytics'

jar {
    manifest {
        attributes (
                'Bundle-Vendor': 'DotCMS',
                'Bundle-Description': 'dotCMS - GA Reporting',
                'Bundle-DocURL': 'https://dotcms.com/',
                'Bundle-Activator': 'com.dotcms.google.analytics.osgi.Activator',
                'Bundle-ClassPath' : "${classPathLibraries()}",
                'DynamicImport-Package': '*',
                'Import-Package': '''
                    !com.google.*,
                    !org.apache.avalon.framework.logger.*,
                    org.apache.log;version=0.1.0,
                    *;version=0
                '''
        )
    }

    println 'Jar done'
}

task cleanLibFiles(type: Delete) {
    delete fileTree("src/main/resources/libs").matching {
        include "**/*"
    }
}

task copyToLib(type: Copy) {
    into "src/main/resources/libs"
    from configurations.osgiLibs
}

copyToLib.dependsOn cleanLibFiles
compileJava.dependsOn copyToLib


jar.finalizedBy 'fragmentJar'

/**
 * Searches for jars inside the src/main/resources/libs folder, the returned list is used for the
 * Bundle-ClassPath attribute.
 * @return String with the list of jars inside the src/main/resources/libs folder or empty if the
 * folder does not exist or it is empty.
 */
def classPathLibraries() {

    def bundleClassPath = "";
    fileTree("src/main/resources/libs").filter { it.isFile() }.each { bundleClassPath += "libs/" + it.name + "," }

    if (bundleClassPath != "") {
        bundleClassPath = '.,' + bundleClassPath
    }

    return bundleClassPath
}

/////////////////////////
//Fragment jar
/////////////////////////

ext {
    bundleName = "dotCMS GA Reporting fragment"
    bundleDescription = "dotCMS - GA Reporting fragment"
    fragmentHost = "system.bundle; extension:=framework"
    bundleSymbolicName = "" //Auto generated based on the plugin jar
    bundleVersion = "" //Auto generated based on the plugin jar
    importPackage = "" //Auto generated based on the plugin jar
    bundleManifestVersion = "" //Auto generated based on the plugin jar
    bundleDocURL = "" //Auto generated based on the plugin jar
    bundleVendor = "" //Auto generated based on the plugin jar
}
/**
 * The import generates versions like this: version="[1.8,2)"
 * That format does not work for the export, so we need to replace it
 * to: version=0
 */
ext.fixVersionNumber = {importValue ->
    return importValue.replaceAll("\"\\[[0-9.,]+\\)\"", "0")
}

/**
 * Reads the Manifest file of the just created plugin jar in order to get the required info
 * to automatically create the fragment jar.
 */
task readManifesttAttributes {
    doFirst {

        println 'starting readManifesttAttributes'
        File file = configurations.baseline.singleFile
                //file("${buildDir}/tmp/jar/${jar.baseName}-${jar.version}.jar")
        println 'readManifesttAttributes, file:::: ' + file
        JarFile jar = new JarFile(file)

        println 'jar::::' + jar
        Attributes manifest = jar.getManifest().getMainAttributes()

        bundleSymbolicName = "${manifest.getValue('Bundle-SymbolicName')}"
        bundleVersion = "${manifest.getValue('Bundle-Version')}"
        importPackage = "${manifest.getValue('Import-Package')}"
        bundleManifestVersion = "${manifest.getValue('Bundle-ManifestVersion')}"
        bundleDocURL = "${manifest.getValue('Bundle-DocURL')}"
        bundleVendor = "${manifest.getValue('Bundle-Vendor')}"
        println 'end manifest::::'
    }
}
task fragmentJar(type: Jar) {

    doFirst {


        //Setting the fragment jar name
        baseName = project.name
        archiveName = "${baseName}.fragment-${version}.jar"
        importPackage = fixVersionNumber(importPackage)

        println 'Jar fragmentJar, archiveName = ' + archiveName
        manifest {
            attributes (
                    'Bundle-Name': "${bundleName}",
                    'Bundle-Description': "${bundleDescription}",
                    'Bundle-Vendor': "${bundleVendor}",
                    'Bundle-Version': "${version}",
                    'Bundle-SymbolicName': "${baseName}.fragment",
                    'Bundle-ManifestVersion': "${bundleManifestVersion}",
                    'Bundle-DocURL': "${bundleDocURL}",
                    'Fragment-Host': "${fragmentHost}",
                    'Export-Package': "${importPackage}"
            )
        }
    }
}
fragmentJar.dependsOn 'readManifesttAttributes'

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.2'
}
